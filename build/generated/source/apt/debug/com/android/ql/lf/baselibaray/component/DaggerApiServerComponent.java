// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.android.ql.lf.baselibaray.component;

import com.android.ql.lf.baselibaray.present.GetDataFromNetPresent;
import com.android.ql.lf.baselibaray.ui.activity.BaseSplashActivity;
import com.android.ql.lf.baselibaray.ui.activity.BaseSplashActivity_MembersInjector;
import com.android.ql.lf.baselibaray.ui.activity.FragmentContainerActivity;
import com.android.ql.lf.baselibaray.ui.activity.FragmentContainerActivity_MembersInjector;
import com.android.ql.lf.baselibaray.ui.fragment.BaseNetWorkingFragment;
import com.android.ql.lf.baselibaray.ui.fragment.BaseNetWorkingFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerApiServerComponent implements ApiServerComponent {
  private Provider<Retrofit> retrofitProvider;

  private Provider<ApiServer> createApiServerProvider;

  private Provider<GetDataFromNetPresent> createNetPresentProvider;

  private DaggerApiServerComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.retrofitProvider =
        new com_android_ql_lf_baselibaray_component_AppComponent_retrofit(builder.appComponent);
    this.createApiServerProvider =
        DoubleCheck.provider(
            ApiServerModule_CreateApiServerFactory.create(
                builder.apiServerModule, retrofitProvider));
    this.createNetPresentProvider =
        DoubleCheck.provider(
            ApiServerModule_CreateNetPresentFactory.create(
                builder.apiServerModule, createApiServerProvider));
  }

  @Override
  public void inject(FragmentContainerActivity activity) {
    injectFragmentContainerActivity(activity);
  }

  @Override
  public void inject(BaseNetWorkingFragment baseNetWorkingFragment) {
    injectBaseNetWorkingFragment(baseNetWorkingFragment);
  }

  @Override
  public void inject(BaseSplashActivity splashActivity) {
    injectBaseSplashActivity(splashActivity);
  }

  private FragmentContainerActivity injectFragmentContainerActivity(
      FragmentContainerActivity instance) {
    FragmentContainerActivity_MembersInjector.injectPresent(
        instance, createNetPresentProvider.get());
    return instance;
  }

  private BaseNetWorkingFragment injectBaseNetWorkingFragment(BaseNetWorkingFragment instance) {
    BaseNetWorkingFragment_MembersInjector.injectMPresent(instance, createNetPresentProvider.get());
    return instance;
  }

  private BaseSplashActivity injectBaseSplashActivity(BaseSplashActivity instance) {
    BaseSplashActivity_MembersInjector.injectGetDataFromNetPresent(
        instance, createNetPresentProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApiServerModule apiServerModule;

    private AppComponent appComponent;

    private Builder() {}

    public ApiServerComponent build() {
      if (apiServerModule == null) {
        this.apiServerModule = new ApiServerModule();
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerApiServerComponent(this);
    }

    public Builder apiServerModule(ApiServerModule apiServerModule) {
      this.apiServerModule = Preconditions.checkNotNull(apiServerModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }

  private static class com_android_ql_lf_baselibaray_component_AppComponent_retrofit
      implements Provider<Retrofit> {
    private final AppComponent appComponent;

    com_android_ql_lf_baselibaray_component_AppComponent_retrofit(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Retrofit get() {
      return Preconditions.checkNotNull(
          appComponent.retrofit(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
